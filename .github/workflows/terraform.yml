---
on:
  workflow_call:
    inputs:
      enable_apply:
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        run: |
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color >> tfplan.txt
          cat tfplan.txt
          echo "plan_file=./tfplan.txt" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # TODO: Figure out why this isn't nesting
      # - name: Comment on PR
      #   uses: ./.github/workflows/heimdallr.yml
      #   with:
      #     comment_content: \`\`\`\n${{ steps.plan.outputs.plan_file }}\`\`\`
      #     comment_identifier: <!-- heimdallr_terraform_plan_comment -->
      #     comment_label: Terraform Plan Output
      #     enable_comment_on_pr: true

      - name: Comment on PR
        if: github.event_name == 'pull_request' && !github.event.pull_request.merged
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.HEIMDALLR_TOKEN }}
          script: |
            function getPR(response,context) {
              if ( context.eventName === 'pull_request' ) {
                console.log('Event type was PR, setting PR number.');
                return context.payload.pull_request.number;
              } else if ( response.data.length !== 0 ) {
                console.log('Event type was push, setting PR number.');
                return response.data[0].number;
              } else {
                console.log('No PR found');
                return 'No PR found';
              }
            }
            response = await github.request('GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls', {
                owner: context.payload.organization.login,
                repo: context.payload.repository.name,
                commit_sha: context.sha,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28'
                }
            });
            pr_number = getPR(response, context);
            if (pr_number === 'No PR found') {
              process.exit(0);
            }
            const fs = require('fs');
            const planFilePath = `${{ steps.plan.outputs.plan_file }}`;
            const tfplan = fs.readFileSync(planFilePath, 'utf8')
            const isPlanTooLong = tfplan.length > 65000;
            const plan = isPlanTooLong ? tfplan.toString().substring(0, 65000) : tfplan;
            const commentIdentifier = '<!-- heimdallr_terraform_plan_comment -->';
            const output = `
            ${commentIdentifier}
            <details><summary>Terraform Plan Output</summary>

            \`\`\`\n
            ${plan}
            \`\`\`

            </details>`;
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existingComment = comments.find(comment => comment.body.includes(commentIdentifier));
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: pr_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output,
              });
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: inputs.enable_apply && github.event.pull_request.merged
        run: |
          terraform apply -no-color -auto-approve >> tfapply.txt
          cat tfapply.txt
          echo "apply_file=./tfapply.txt" >> $GITHUB_OUTPUT

      # TODO: Figure out why this isn't nesting
      # - name: Heimdallr
      #   if: steps.apply.outcome != 'failure' && inputs.enable_apply
      #   uses: ./.github/workflows/heimdallr.yml
      #   with:
      #     enable_slack: true
      #     slack_message: "The project <https://github.com/${{ github.repository }}|${{ github.repository }}> just applied new Terraform. <https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}>"
      #
      - name: Send Slack Message
        if: steps.apply.outcome != 'failure' && inputs.enable_apply && github.event.pull_request.merged
        uses: archive/github-actions-slack@v2.9.0
        id: send-message
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ secrets.SLACK_PLATFORM_NOTIFICATIONS_CHANNEL_ID }}
          slack-text: "The project <https://github.com/${{ github.repository }}|${{ github.repository }}> just applied new Terraform. <https://github.com/${{ github.repository }}/actions/runs/${{github.run_id}}>"
          slack-optional-unfurl_links: false

      - name: Terraform outputs
        run: terraform output
